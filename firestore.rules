rules_version = "2"
service cloud.firestore {
  match /databases/{database}/documents {
    match /matches/{matchId} {
    	// Allow authenticated users to create new documents in the 'matches' collection
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userID;
      // Allow all users to read from the 'matches' collection
      allow read: if true;
      // Allow users to delete and update matches only if they are the creator
      allow delete, update: if request.auth != null && request.auth.uid == resource.data.userID;
    }
    
    // Persistence collection
    match /persistence/{userID} {
      // Allow users to read/write to their own document
      allow read, write: if request.auth != null && request.auth.uid == userID || request.auth.uid == "HoDvwZa0rWdSP8dUwjOhcc1d3LK2";
      // Allow anyone to create a new document
      allow create: if request.auth != null;
    }
    
    
    match /users/{userId} {
      	allow read;
        allow create: if isValidUser(userId);
    }
      
    function isValidUser(userId) {
        let isOwner = request.auth.uid == userId;
      	let username = request.resource.data.username;
        let createdValidUsername = existsAfter(/databases/$(database)/documents/usernames/$(username));
        
        return isOwner && createdValidUsername;
    }
      
    match /usernames/{username} {
      	allow read;
        allow create: if isValidUsername(username);
    }
      
    function isValidUsername(username) {
        let isOwner = request.auth.uid == request.resource.data.uid;
        let isValidLength = username.size() < 30;
        let isValidUserDoc = getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
        
        return isOwner && isValidLength && isValidUserDoc;     
   }
  }
}